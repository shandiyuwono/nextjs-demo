{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime-corejs2/helpers/interopRequireDefault\");\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/esm/slicedToArray\"));\n\nvar _toConsumableArray2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/esm/toConsumableArray\"));\n\nvar _map = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/map\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/esm/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime-corejs2/helpers/esm/createClass\"));\n\nvar _defineProperty = _interopRequireDefault(require(\"@babel/runtime-corejs2/core-js/object/define-property\"));\n\n(0, _defineProperty[\"default\"])(exports, \"__esModule\", {\n  value: true\n});\n\nvar UrlNode =\n/*#__PURE__*/\nfunction () {\n  function UrlNode() {\n    (0, _classCallCheck2[\"default\"])(this, UrlNode);\n    this.placeholder = true;\n    this.children = new _map[\"default\"]();\n    this.slugName = null;\n  }\n\n  (0, _createClass2[\"default\"])(UrlNode, [{\n    key: \"insert\",\n    value: function insert(urlPath) {\n      this._insert(urlPath.split('/').filter(Boolean));\n    }\n  }, {\n    key: \"smoosh\",\n    value: function smoosh() {\n      return this._smoosh();\n    }\n  }, {\n    key: \"_smoosh\",\n    value: function _smoosh() {\n      var _this = this;\n\n      var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '/';\n      var childrenPaths = (0, _toConsumableArray2[\"default\"])(this.children.keys()).sort();\n\n      if (this.hasSlug) {\n        childrenPaths.splice(childrenPaths.indexOf('[]'), 1);\n      }\n\n      var routes = childrenPaths.map(function (c) {\n        return _this.children.get(c)._smoosh(\"\".concat(prefix).concat(c, \"/\"));\n      }).reduce(function (prev, curr) {\n        return [].concat((0, _toConsumableArray2[\"default\"])(prev), (0, _toConsumableArray2[\"default\"])(curr));\n      }, []);\n\n      if (this.hasSlug) {\n        routes.push.apply(routes, (0, _toConsumableArray2[\"default\"])(this.children.get('[]')._smoosh(\"\".concat(prefix, \"[\").concat(this.slugName, \"]/\"))));\n      }\n\n      if (!this.placeholder) {\n        routes.unshift(prefix === '/' ? '/' : prefix.slice(0, -1));\n      }\n\n      return routes;\n    }\n  }, {\n    key: \"_insert\",\n    value: function _insert(urlPaths) {\n      if (urlPaths.length === 0) {\n        this.placeholder = false;\n        return;\n      }\n\n      var _urlPaths = (0, _slicedToArray2[\"default\"])(urlPaths, 1),\n          nextSegment = _urlPaths[0];\n\n      if (nextSegment.startsWith('[') && nextSegment.endsWith(']')) {\n        var slugName = nextSegment.slice(1, -1);\n\n        if (this.hasSlug && slugName !== this.slugName) {\n          throw new Error('You cannot use different slug names for the same dynamic path.');\n        }\n\n        this.slugName = slugName;\n        nextSegment = '[]';\n      }\n\n      if (!this.children.has(nextSegment)) {\n        this.children.set(nextSegment, new UrlNode());\n      }\n\n      this.children.get(nextSegment)._insert(urlPaths.slice(1));\n    }\n  }, {\n    key: \"hasSlug\",\n    get: function get() {\n      return this.slugName != null;\n    }\n  }]);\n  return UrlNode;\n}();\n\nfunction getSortedRoutes(normalizedPages) {\n  var root = new UrlNode();\n  normalizedPages.forEach(function (page) {\n    return root.insert(page);\n  });\n  return root.smoosh();\n}\n\nexports.getSortedRoutes = getSortedRoutes;","map":{"version":3,"sources":["C:\\Users\\Shandi\\Documents\\Hacktiv8\\Phase3\\thundertalk\\demo\\node_modules\\next-server\\dist\\lib\\router\\utils\\sorted-routes.js"],"names":["exports","value","UrlNode","placeholder","children","slugName","urlPath","_insert","split","filter","Boolean","_smoosh","prefix","childrenPaths","keys","sort","hasSlug","splice","indexOf","routes","map","c","get","reduce","prev","curr","push","unshift","slice","urlPaths","length","nextSegment","startsWith","endsWith","Error","has","set","getSortedRoutes","normalizedPages","root","forEach","page","insert","smoosh"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass UrlNode {\n    constructor() {\n        this.placeholder = true;\n        this.children = new Map();\n        this.slugName = null;\n    }\n    get hasSlug() {\n        return this.slugName != null;\n    }\n    insert(urlPath) {\n        this._insert(urlPath.split('/').filter(Boolean));\n    }\n    smoosh() {\n        return this._smoosh();\n    }\n    _smoosh(prefix = '/') {\n        const childrenPaths = [...this.children.keys()].sort();\n        if (this.hasSlug) {\n            childrenPaths.splice(childrenPaths.indexOf('[]'), 1);\n        }\n        const routes = childrenPaths\n            .map(c => this.children.get(c)._smoosh(`${prefix}${c}/`))\n            .reduce((prev, curr) => [...prev, ...curr], []);\n        if (this.hasSlug) {\n            routes.push(...this.children.get('[]')._smoosh(`${prefix}[${this.slugName}]/`));\n        }\n        if (!this.placeholder) {\n            routes.unshift(prefix === '/' ? '/' : prefix.slice(0, -1));\n        }\n        return routes;\n    }\n    _insert(urlPaths) {\n        if (urlPaths.length === 0) {\n            this.placeholder = false;\n            return;\n        }\n        let [nextSegment] = urlPaths;\n        if (nextSegment.startsWith('[') && nextSegment.endsWith(']')) {\n            const slugName = nextSegment.slice(1, -1);\n            if (this.hasSlug && slugName !== this.slugName) {\n                throw new Error('You cannot use different slug names for the same dynamic path.');\n            }\n            this.slugName = slugName;\n            nextSegment = '[]';\n        }\n        if (!this.children.has(nextSegment)) {\n            this.children.set(nextSegment, new UrlNode());\n        }\n        this.children.get(nextSegment)._insert(urlPaths.slice(1));\n    }\n}\nfunction getSortedRoutes(normalizedPages) {\n    const root = new UrlNode();\n    normalizedPages.forEach(page => root.insert(page));\n    return root.smoosh();\n}\nexports.getSortedRoutes = getSortedRoutes;\n"]},"metadata":{},"sourceType":"script"}